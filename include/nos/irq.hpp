/**
 * The Null Operating System (NOS).
 * Copyright (C) 2024  Alexander (@alkuzin).
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * @file  irq.hpp
 * @brief IRQ (Interrupt Request). Contains definitions related to interrupt handling.
 * 
 * @details This header file includes constants, structures, and functions 
 * related to managing interrupts in the kernel. 
 * 
 * ISR (Interrupt Service Routine). An ISR is a software function or routine that 
 * is executed in response to an interrupt generated by hardware or software.
 * 
 * ISRs are used to manage various types of interrupts, such as hardware interrupts 
 * from devices like keyboards or timers, or software interrupts triggered
 * by specific instructions.
 * 
 * @author Alexander Kuzin (<a href="https://github.com/alkuzin">alkuzin</a>)
 * @date   17.05.2024 
 */

#ifndef _NOS_KERNEL_IRQ_HPP_
#define _NOS_KERNEL_IRQ_HPP_

#include <nos/types.hpp>
#include <nos/irq.hpp>


namespace kernel {
namespace core {

/** @brief Structure representing interrupt register state */
struct int_reg_s {
    u32 cr2;        ///< Control Register 2
    u32 ds;         ///< Data Segment
    u32 edi;        ///< Destination Index
    u32 esi;        ///< Source Index
    u32 ebp;        ///< Base Pointer
    u32 esp;        ///< Stack Pointer
    u32 ebx;        ///< Base Register
    u32 edx;        ///< Data Register
    u32 ecx;        ///< Counter Register
    u32 eax;        ///< Accumulator Register
    u32 int_no;     ///< Interrupt Number
    u32 err_code;   ///< Error Code
    u32 eip;        ///< Instruction Pointer
    u32 csm;        ///< Code Segment
    u32 eflags;     ///< Flags Register
    u32 useresp;    ///< User Stack Pointer
    u32 ss;         ///< Stack Segment
} __attribute__((packed)); /*Prevent the compiler from optimizing*/

/** @brief Typedef for int_reg_s */
typedef struct int_reg_s int_reg_t;

/** @brief Typedef for IRQ handler function pointer */
typedef void (*irq_handler_t) (int_reg_t *);

/**
 * @brief ISR handler function.
 * 
 * @param [in] regs - given pointer to interrupt register state.
 */
void isr_handler(int_reg_t *regs);

/**
 * @brief IRQ handler function.
 * 
 * @param [in] regs - given pointer to interrupt register state.
 */
void irq_handler(int_reg_t *regs);

/**
 * @brief Install handler for IRQ.
 * 
 * @param [in] irq - given IRQ number.
 * @param [in] handler - given pointer to IRQ handler function.
 */
void irq_install_handler(int irq, irq_handler_t handler);

/**
 * @brief Uninstall handler for IRQ.
 * 
 * @param [in] irq - given IRQ number.
 */
void irq_uninstall_handler(int irq);

} // namespace core
} // namespace kernel

/** @brief Declare ISR functions for hardware interrupts 0-31. */
extern "C" void isr0(void);
extern "C" void isr1(void);
extern "C" void isr2(void);
extern "C" void isr3(void);
extern "C" void isr4(void);
extern "C" void isr5(void);
extern "C" void isr6(void);
extern "C" void isr7(void);
extern "C" void isr8(void);
extern "C" void isr9(void);
extern "C" void isr10(void);
extern "C" void isr11(void);
extern "C" void isr12(void);
extern "C" void isr13(void);
extern "C" void isr14(void);
extern "C" void isr15(void);
extern "C" void isr16(void);
extern "C" void isr17(void);
extern "C" void isr18(void);
extern "C" void isr19(void);
extern "C" void isr20(void);
extern "C" void isr21(void);
extern "C" void isr22(void);
extern "C" void isr23(void);
extern "C" void isr24(void);
extern "C" void isr25(void);
extern "C" void isr26(void);
extern "C" void isr27(void);
extern "C" void isr28(void);
extern "C" void isr29(void);
extern "C" void isr30(void);
extern "C" void isr31(void);

/** @brief Declare ISR functions for system calls. */
extern "C" void isr128(void);
extern "C" void isr177(void);

/** @brief Declare ISR functions for hardware interrupts 0-15. */
extern "C" void irq0(void);
extern "C" void irq1(void);
extern "C" void irq2(void);
extern "C" void irq3(void);
extern "C" void irq4(void);
extern "C" void irq5(void);
extern "C" void irq6(void);
extern "C" void irq7(void);
extern "C" void irq8(void);
extern "C" void irq9(void);
extern "C" void irq10(void);
extern "C" void irq11(void);
extern "C" void irq12(void);
extern "C" void irq13(void);
extern "C" void irq14(void);
extern "C" void irq15(void);

#endif /* _NOS_KERNEL_IRQ_HPP_ */